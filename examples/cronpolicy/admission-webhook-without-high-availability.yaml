apiVersion: checkpoint.devsisters.com/v1
kind: CronPolicy
metadata:
  name: admission-webhook-without-high-availability
spec:
  suspend: false
  schedule: "* * * * *"
  resources:
  - kind: ValidatingWebhookConfiguration
  - kind: MutatingWebhookConfiguration
  - kind: Endpoints
  code: |
    // Config
    const excludeWebhookConfigurations = {
      someName: true,
    };

    function checkWebhookConfiguration(webhookConfiguration, endpointTable, vulnerables) {
      if (excludeWebhookConfigurations[webhookConfiguration.metadata.name]) {
        return;
      }
      for (const webhook of webhookConfiguration.webhooks) {
        const service = webhook.clientConfig.service;
        if (service == null) {
          continue;
        }
        const namespace = service.namespace;
        const name = service.name;

        const endpoint = endpointTable[`${namespace}/${name}`];
        if (endpoint == null) {
          continue
        }

        const subsets = endpoint.subsets;
        if (subsets == null) {
          vulnerables.push(webhookConfiguration);
          return
        }

        const addresses = {};
        let addressesCount = 0;
        for (const subset of subsets) {
          for (const address of subset.addresses) {
            const addressJsonString = JSON.stringify(address);
            if (addresses[addressJsonString] == null) {
              addresses[addressJsonString] = true;
              addressesCount += 1;
            }
          }
        }

        if (addressesCount <= 1) {
          vulnerables.push(webhookConfiguration);
        }
      }
    }

    const [validatingwebhookconfigurations, mutatingwebhookconfigurations, endpoints] = getResources();

    const endpointTable = {};
    for (const endpoint of endpoints) {
      endpointTable[`${endpoint.metadata.namespace}/${endpoint.metadata.name}`] = endpoint;
    }

    const vulnerables = [];

    for (const webhookConfiguration of validatingwebhookconfigurations) {
      checkWebhookConfiguration(webhookConfiguration, endpointTable, vulnerables);
    }
    for (const webhookConfiguration of mutatingwebhookconfigurations) {
      checkWebhookConfiguration(webhookConfiguration, endpointTable, vulnerables);
    }

    if (vulnerables.length > 0) {
      let names = "";
      for (const webhookConfigurations of vulnerables) {
        names += `- \`${webhookConfigurations.metadata.name}\`\n`;
      }
      setOutput({names});
    }
  notifications:
    slack:
      webhookUrl: "https://example.com"
      message: |
        `{policy.name}` *is firing*
        Following admission webhooks are not high-available:
        {output.names}
    webhook:
      url: "https://example.com"
      method: POST
      headers:
        content-type: application/json
      body: |
        {{
          "text": "{policy.name} is firing",
          "blocks": [{{
            "type": "section",
            "text": {{
              "type": "mrkdwn",
              "text": "`{policy.name}` *is firing*\nFollowing admission webhooks are not high-available:\n{output.names}"
            }}
          }}]
        }}
  restartPolicy: Never
