apiVersion: v1
kind: ServiceAccount
metadata:
  name: checkpoint-validatingrule-namespace-must-have-unique-annotation
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: checkpoint-validatingrule-namespace-must-have-unique-annotation
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: checkpoint-validatingrule-namespace-must-have-unique-annotation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: checkpoint-validatingrule-namespace-must-have-unique-annotation
subjects:
- kind: ServiceAccount
  name: checkpoint-validatingrule-namespace-must-have-unique-annotation
  namespace: default
---
apiVersion: checkpoint.devsisters.com/v1
kind: ValidatingRule
metadata:
  name: namespace-must-have-unique-annotation
spec:
  objectRules:
  - apiGroups: [""]
    apiVersions: ["*"]
    resources: ["namespaces"]
    operations: ["CREATE"]
  serviceAccount:
    namespace: default
    name: checkpoint-validatingrule-namespace-must-have-unique-annotation
  code: |
    const request = getRequest();
    const requestedNamespaceUniqueAnnotation = request.object.metadata.annotations?.unique;

    const namespaces = kubeList({group: "", version: "v1", kind: "Namespace"}).items;

    for (const namespace of namespaces) {
      const uniqueAnnotation = namespace.metadata.annotations?.unique;

      if (uniqueAnnotation != null && requestedNamespaceUniqueAnnotation === uniqueAnnotation) {
        deny("Requested namespace has a not unique `unique` annotation");
      }
    }
